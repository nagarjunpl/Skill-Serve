// Kannada-English Translator for SkillServe

// Common translations for the application
const translations = {

    'home': { kannada: '‡≤Æ‡≤®‡≥Ü', english: 'Home' },
    'dashboard': { kannada: '‡≤°‡≥ç‡≤Ø‡≤æ‡≤∂‡≥ç‚Äå‡≤¨‡≥ã‡≤∞‡≥ç‡≤°‡≥ç', english: 'Dashboard' },
    'profile': { kannada: '‡≤™‡≥ç‡≤∞‡≥ä‡≤´‡≥à‡≤≤‡≥ç', english: 'Profile' },
    'logout': { kannada: '‡≤≤‡≤æ‡≤ó‡≥ç ‡≤î‡≤ü‡≥ç', english: 'Logout' },
    'login': { kannada: '‡≤≤‡≤æ‡≤ó‡≤ø‡≤®‡≥ç', english: 'Login' },
    'signup': { kannada: '‡≤∏‡≥à‡≤®‡≥ç ‡≤Ö‡≤™‡≥ç', english: 'Sign Up' },
    

    'electrician': { kannada: '‡≤µ‡≤ø‡≤¶‡≥ç‡≤Ø‡≥Å‡≤§‡≥ç ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤æ‡≤∞', english: 'Electrician' },
    'plumber': { kannada: '‡≤ï‡≥ä‡≤≥‡≤µ‡≥Ü ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤æ‡≤∞', english: 'Plumber' },
    'painter': { kannada: '‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞', english: 'Painter' },
    'carpenter': { kannada: '‡≤¨‡≤°‡≤ó‡≤ø', english: 'Carpenter' },
    'mechanic': { kannada: '‡≤Æ‡≥Ü‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≤ø‡≤ï‡≥ç', english: 'Mechanic' },
    'cleaner': { kannada: '‡≤∏‡≥ç‡≤µ‡≤ö‡≥ç‡≤õ‡≤§‡≤æ ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤æ‡≤∞', english: 'Cleaner' },
    
   
    'available': { kannada: '‡≤≤‡≤≠‡≥ç‡≤Ø', english: 'Available' },
    'busy': { kannada: '‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø‡≤®‡≤ø‡≤∞‡≤§', english: 'Busy' },
    'book now': { kannada: '‡≤à‡≤ó ‡≤¨‡≥Å‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø', english: 'Book Now' },
    'call now': { kannada: '‡≤à‡≤ó ‡≤ï‡≤∞‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø', english: 'Call Now' },
    'contact': { kannada: '‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï', english: 'Contact' },
    'location': { kannada: '‡≤∏‡≥ç‡≤•‡≤≥', english: 'Location' },
    'experience': { kannada: '‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ', english: 'Experience' },
    'rating': { kannada: '‡≤∞‡≥á‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç', english: 'Rating' },
    'description': { kannada: '‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü', english: 'Description' },
    
    // Booking related
    'my bookings': { kannada: '‡≤®‡≤®‡≥ç‡≤® ‡≤¨‡≥Å‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≥Å', english: 'My Bookings' },
    'pending': { kannada: '‡≤¨‡≤æ‡≤ï‡≤ø ‡≤á‡≤∞‡≥Å‡≤µ', english: 'Pending' },
    'accepted': { kannada: '‡≤∏‡≥ç‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', english: 'Accepted' },
    'completed': { kannada: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤ó‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü', english: 'Completed' },
    'cancelled': { kannada: '‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', english: 'Cancelled' },
    'rejected': { kannada: '‡≤§‡≤ø‡≤∞‡≤∏‡≥ç‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü', english: 'Rejected' },
    

    'name': { kannada: '‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å', english: 'Name' },
    'email': { kannada: '‡≤á‡≤Æ‡≥á‡≤≤‡≥ç', english: 'Email' },
    'password': { kannada: '‡≤™‡≤æ‡≤∏‡≥ç‚Äå‡≤µ‡≤∞‡≥ç‡≤°‡≥ç', english: 'Password' },
    'phone': { kannada: '‡≤´‡≥ã‡≤®‡≥ç', english: 'Phone' },
    'address': { kannada: '‡≤µ‡≤ø‡≤≥‡≤æ‡≤∏', english: 'Address' },
    'save': { kannada: '‡≤â‡≤≥‡≤ø‡≤∏‡≤ø', english: 'Save' },
    'cancel': { kannada: '‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø', english: 'Cancel' },
    'edit': { kannada: '‡≤∏‡≤Ç‡≤™‡≤æ‡≤¶‡≤ø‡≤∏‡≤ø', english: 'Edit' },
    'delete': { kannada: '‡≤Ö‡≤≥‡≤ø‡≤∏‡≤ø', english: 'Delete' },
    'search': { kannada: '‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤ø', english: 'Search' },
    'filter': { kannada: '‡≤´‡≤ø‡≤≤‡≥ç‡≤ü‡≤∞‡≥ç', english: 'Filter' },
    'clear': { kannada: '‡≤§‡≥Ü‡≤∞‡≤µ‡≥Å‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø', english: 'Clear' },
    
    'welcome': { kannada: '‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§', english: 'Welcome' },
    'thank you': { kannada: '‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å', english: 'Thank You' },
    'please wait': { kannada: '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ï‡≤æ‡≤Ø‡≤ø‡≤∞‡≤ø', english: 'Please Wait' },
    'loading': { kannada: '‡≤≤‡≥ã‡≤°‡≥ç ‡≤Ü‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü', english: 'Loading' },
    'success': { kannada: '‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø', english: 'Success' },
    'error': { kannada: '‡≤¶‡≥ã‡≤∑', english: 'Error' },
    
    'find local skilled workers': { kannada: '‡≤∏‡≥ç‡≤•‡≤≥‡≥Ä‡≤Ø ‡≤®‡≥Å‡≤∞‡≤ø‡≤§ ‡≤ï‡≥Ü‡≤≤‡≤∏‡≤ó‡≤æ‡≤∞‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤ø', english: 'Find Local Skilled Workers' },
    'book service': { kannada: '‡≤∏‡≥á‡≤µ‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≥Å‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø', english: 'Book Service' },
    'describe your issue': { kannada: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø', english: 'Describe Your Issue' },
    'preferred date': { kannada: '‡≤Ü‡≤¶‡≥ç‡≤Ø‡≤§‡≥Ü‡≤Ø ‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï', english: 'Preferred Date' },
    'preferred time': { kannada: '‡≤Ü‡≤¶‡≥ç‡≤Ø‡≤§‡≥Ü‡≤Ø ‡≤∏‡≤Æ‡≤Ø', english: 'Preferred Time' },
    'contact number': { kannada: '‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü', english: 'Contact Number' },
    'years of experience': { kannada: '‡≤µ‡≤∞‡≥ç‡≤∑‡≤ó‡≤≥ ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ', english: 'Years of Experience' },
    'rate your experience': { kannada: '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≥á‡≤ü‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø', english: 'Rate Your Experience' },
    'submit rating': { kannada: '‡≤∞‡≥á‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤∏‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø', english: 'Submit Rating' },
    'mark as completed': { kannada: '‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤ó‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤ø', english: 'Mark as Completed' },
    'mark as available': { kannada: '‡≤≤‡≤≠‡≥ç‡≤Ø ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤ø', english: 'Mark as Available' },
    'mark as busy': { kannada: '‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø‡≤®‡≤ø‡≤∞‡≤§ ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤ø', english: 'Mark as Busy' }
};

// Current language state
let currentLanguage = localStorage.getItem('skillserve_language') || 'english';

// Initialize translator
function initializeTranslator() {
    // Add language toggle button to navigation
    addLanguageToggle();
    
    // Apply current language
    applyLanguage(currentLanguage);
}

// Add language toggle button to navigation
function addLanguageToggle() {
    const navElements = document.querySelectorAll('.nav');
    
    navElements.forEach(nav => {
        // Check if toggle already exists
        if (nav.querySelector('.language-toggle')) return;
        
        const languageToggle = document.createElement('button');
        languageToggle.className = 'btn language-toggle';
        languageToggle.innerHTML = currentLanguage === 'english' ? '‡≤ï‡≤®‡≥ç‡≤®‡≤°' : 'English';
        languageToggle.title = currentLanguage === 'english' ? 'Switch to Kannada' : 'Switch to English';
        languageToggle.onclick = toggleLanguage;
        
        // Insert before logout link
        const logoutLink = nav.querySelector('[onclick="logout()"]');
        if (logoutLink) {
            nav.insertBefore(languageToggle, logoutLink);
        } else {
            nav.appendChild(languageToggle);
        }
    });
}

// Toggle between languages
function toggleLanguage() {
    currentLanguage = currentLanguage === 'english' ? 'kannada' : 'english';
    localStorage.setItem('skillserve_language', currentLanguage);
    
    // Update toggle button text
    const toggleButtons = document.querySelectorAll('.language-toggle');
    toggleButtons.forEach(btn => {
        btn.innerHTML = currentLanguage === 'english' ? '‡≤ï‡≤®‡≥ç‡≤®‡≤°' : 'English';
        btn.title = currentLanguage === 'english' ? 'Switch to Kannada' : 'Switch to English';
    });
    
    // Apply language to page
    applyLanguage(currentLanguage);
}

// Apply language to the page
function applyLanguage(language) {
    // Translate elements with data-translate attribute
    const translatableElements = document.querySelectorAll('[data-translate]');
    
    translatableElements.forEach(element => {
        const key = element.getAttribute('data-translate').toLowerCase();
        if (translations[key] && translations[key][language]) {
            if (element.tagName === 'INPUT' && element.type === 'submit') {
                element.value = translations[key][language];
            } else if (element.tagName === 'INPUT' && element.placeholder) {
                element.placeholder = translations[key][language];
            } else {
                element.textContent = translations[key][language];
            }
        }
    });
    
    // Update page title
    const titleKey = document.body.getAttribute('data-page-title');
    if (titleKey && translations[titleKey] && translations[titleKey][language]) {
        document.title = translations[titleKey][language] + ' - SkillServe';
    }
}

// Translate text programmatically
function translateText(key, language = currentLanguage) {
    const normalizedKey = key.toLowerCase();
    if (translations[normalizedKey] && translations[normalizedKey][language]) {
        return translations[normalizedKey][language];
    }
    return key; // Return original if translation not found
}

// Get current language
function getCurrentLanguage() {
    return currentLanguage;
}

// Add translation attributes to elements
function addTranslationAttributes() {
    // This function can be called to automatically add data-translate attributes
    // to common elements based on their text content
    const commonElements = document.querySelectorAll('button, a, h1, h2, h3, label');
    
    commonElements.forEach(element => {
        const text = element.textContent.trim().toLowerCase();
        if (translations[text] && !element.hasAttribute('data-translate')) {
            element.setAttribute('data-translate', text);
        }
    });
}

// Logout confirmation functionality
function confirmLogout() {
    const message = currentLanguage === 'kannada' 
        ? '‡≤®‡≥Ä‡≤µ‡≥Å ‡≤ñ‡≤ö‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤≤‡≤æ‡≤ó‡≥ç ‡≤î‡≤ü‡≥ç ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤¨‡≤Ø‡≤∏‡≥Å‡≤µ‡≤ø‡≤∞‡≤æ?' 
        : 'Are you sure you want to logout?';
    
    const confirmText = currentLanguage === 'kannada' ? '‡≤π‡≥å‡≤¶‡≥Å' : 'Yes';
    const cancelText = currentLanguage === 'kannada' ? '‡≤á‡≤≤‡≥ç‡≤≤' : 'No';
    
    // Create custom confirmation modal
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.innerHTML = `
        <div class="modal-content logout-confirmation-modal">
            <div class="logout-confirmation">
                <div class="logout-icon">üö™</div>
                <h3>${currentLanguage === 'kannada' ? '‡≤≤‡≤æ‡≤ó‡≥ç ‡≤î‡≤ü‡≥ç ‡≤¶‡≥É‡≤¢‡≥Ä‡≤ï‡≤∞‡≤£' : 'Logout Confirmation'}</h3>
                <p>${message}</p>
                <div class="logout-actions">
                    <button class="btn btn-danger" onclick="proceedLogout()">${confirmText}</button>
                    <button class="btn btn-secondary" onclick="cancelLogout()">${cancelText}</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listener for clicking outside modal
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            cancelLogout();
        }
    });
    
    // Store reference for cleanup
    window.currentLogoutModal = modal;
}

// Proceed with logout
function proceedLogout() {
    if (window.currentLogoutModal) {
        document.body.removeChild(window.currentLogoutModal);
        window.currentLogoutModal = null;
    }
    
    // Clear session and redirect
    clearCurrentUser();
    window.location.href = 'index.html';
}

// Cancel logout
function cancelLogout() {
    if (window.currentLogoutModal) {
        document.body.removeChild(window.currentLogoutModal);
        window.currentLogoutModal = null;
    }
}

// Override the original logout function
function logout() {
    confirmLogout();
}

// Initialize translator when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Small delay to ensure other scripts have loaded
    setTimeout(() => {
        initializeTranslator();
        addTranslationAttributes();
    }, 100);
});
